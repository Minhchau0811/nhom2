@page "/orderdetail/{id:int}"
@attribute [Authorize]
@inject NavigationManager navigationManager
@inject IProcessOrderUseCase processOrderUseCase
@inject IViewOrderDetailUseCase ViewOrderDetailUseCase
<h3>CHI TIẾT ĐƠN ĐẶT HÀNG</h3>
@if (order != null)
{
     <div class="card" style="left:55px; width: 300px; border:0; background:#FFE0B2">
    <p>
        <h5>Thông tin khách hàng:</h5>
    </p>
    <p>@order.CustomerName</p>
    <p>@order.CustomerAddress</p>
    <p>@order.CustomerCity</p>
    <p>@order.CustomerStateProvince</p>
    <p>@order.CustomerCountry</p>
    <br />
    </div>
    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Tên sách</th>
                <th>Giá sách</th>
                <th>Số lượng</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var item in order.LineItems)
            {
                <tr>
                    <td>@item.Product.Name</td>
                    <td>@item.Product.Price</td>
                    <td>@item.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <button type="button" class="btn btn-primary" @onclick="HandleProcessOrder">Duyệt đơn</button>
}

@code {
    [Parameter]
    public int Id{ get; set; }
    private Order order;
    private AuthenticationState authState;
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        authState = await authStateTask;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(Id>0)
        {
            order = ViewOrderDetailUseCase.Execute(Id);
        }
    }
    private void HandleProcessOrder()
    {
        if (order != null && authState !=null)
        {
            processOrderUseCase.Execute(order.OrderId.Value, authState.User.Identity.Name);
            navigationManager.NavigateTo("/outstandingorders");
        }
    }
}
