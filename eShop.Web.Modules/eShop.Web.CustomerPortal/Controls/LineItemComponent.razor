@inject IDeleteProductUseCase deleteProductUseCase
@inject IUpdateQuantityUseCase updateQuantityUseCase

@if (LineItem != null && LineItem.Product != null)
{
    <li class="row">
        <div class="col">
            <img src="@LineItem.Product.ImageLink"/>
        </div>
        <div class="col">
            <h5>@LineItem.Product.Name</h5>
            <div>
                Số lượng:&nbsp;&nbsp;
                <input type="number" min="0" value="@LineItem.Quantity" @onchange="HandleQuantityChange"/>
            </div>
            <div>
                Giá: &nbsp;&nbsp;@LineItem.Product.Price.ToString("c")
            </div>
        </div>
        <div class="col">
            <MudIconButton class="btn btn-light" @onclick="@(() => DeleteProduct(LineItem.ProductId))" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
        </div>
    </li>
}

@code {
    [Parameter]
    public OrderLineItem LineItem { get; set; }

    [Parameter]
    public EventCallback<Order> OnDeleteProduct{ get; set; }

    [Parameter]
    public EventCallback<Order> OnUpdateQuantity{ get; set; }

    async void HandleQuantityChange(ChangeEventArgs e)
    {
        if(e.Value == null || string.IsNullOrEmpty(e.Value.ToString())) return;
        int qty = 0;
        if (int.TryParse(e.Value.ToString(),out qty))
        {
            if (qty < 0) return;
            var order = await updateQuantityUseCase.Excute(LineItem.ProductId, qty);
            await OnUpdateQuantity.InvokeAsync(order);
        }
    }

    async void DeleteProduct(int productId)
    {
        var order = await deleteProductUseCase.Execute(productId);
        await OnDeleteProduct.InvokeAsync(order);
    }
}
